asyncapi: '2.0.0'
info:
  title: Donation Box - Mainframe WebSocket API
  version: '1.0.1'
  description: >
    This API is used for communication between the Donation Box and the Mainframe.
    The Donation Box connects to the Mainframe via WebSocket, authenticates on the application layer,
    and then receives periodic status updates and commands regarding the mining/job process.
servers:
  production:
    url: 'wss://mainframe.example.com/ws'
    protocol: 'wss'  # WebSocket over TLS (secure)
    description: WebSocket connection over TLS between Donation Box and Mainframe.

channels:
  authenticate:
    description: "Channel for authenticating the DonationBox with the Mainframe."
    publish:
      operationId: 'authRequest'
      description: "Authenticate the Donation Box on the application level after WebSocket connection."
      message:
        contentType: 'application/json'
        payload:
          $ref: '#/components/schemas/AuthRequest'
    
    subscribe:
      operationId: 'authResponse'
      description: "Response from Mainframe after authentication."
      message:
        contentType: 'application/json'
        payload:
          $ref: '#/components/schemas/AuthResponse'

  statusUpdate:
    description: "Regular status requested by the Mainframe from the Donation Box."
    publish:
      operationId: 'statusUpdateRequest'
      description: "Mainframe requests status update from DonationBox"
    subscribe:
      operationId: 'statusUpdateResponse'
      message:
        contentType: 'application/json'
        payload:
          $ref: '#/components/schemas/StatusUpdateResponse'

  startContainer:
    description: "Request to start container, sent by the Mainframe."
    publish:
      operationId: 'startContainerRequest'
      description: "Mainframe orders Donation Box to start container"
      message:
        contentType: 'application/json'
        payload:
          $ref: '#/components/schemas/StartContainerRequest'

    subscribe:
      operationId: 'startContainer'
      message:
        contentType: 'application/json'
        payload:
          $ref: '#/components/schemas/StartContainerResponse'

  stopContainer:
    description: "Request to stop container, sent by the Mainframe."
    publish:
      operationId: 'stopContainerRequest'
      description: 'Mainframe orders Donation Box to stop container'
      message:
        contentType: 'application/json'
        payload:
          $ref: '#/components/schemas/StopContainerRequest'

    subscribe:
      operationId: 'stopContainer'
      message:
        contentType: 'application/json'
        payload:
          $ref: '#/components/schemas/StopContainerResponse'

  addConfig:
    description: "Request to deploy the plugin container with a config and save the corresponding password"
    publish:
      operationId: 'addConfigurationRequest'
      message:
        contentType: 'application/json'
        payload:
          $ref: '#/components/schemas/AddConfigurationRequest'

  addError:
    description: "Channel for sending container error messages from donationbox to mainframe"
    subscribe:
      operationId: 'addErrorResponse'
      message:
        contentType: 'application/json'
        payload:
          $ref: '#/components/schemas/ContainerStatus'

  


components:
  schemas:
    AddConfigurationRequest:
      type: object
      properties:
        plugin_image_name:
          type: string
        plugin_configuration:
          type: object
  
    AuthRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        monitored_containers:
          type: array
          item:
            type: string

    ContainerStatus:
      type: object
      properties:
        containerName:
          type: string
        statusCode:
          type: integer
        statusMsg:
          enum: 
            - 'RUNNING'
            - 'FINISHED'
            - 'CRASHED'
            - 'NOT_FOUND'
            - 'ERROR'
            - 'OK'
            - 'PENDING'

    StatusUpdateResponse:
      type: object
      properties:
        time: 
          type: string
        solar:
          type: object
          properties:
            sysStatus:
              type: integer
            stateOfCharge:
              type: integer
            production:
              type: object
              properties:
                solar:
                  type: integer
                add:
                  type: integer
                grid: 
                  type: integer
            consumption:
              type: object
              properties:
                battery:
                 type: integer
                house:
                  type: integer
                wallbox:
                  type: integer
        container:
          type: array
          item:
            $ref: '#/components/schemas/ContainerStatus'   

    StartContainerRequest:
      type: object
      properties:
        imageName:
          type: string
        containerName:
          type: string
        environmentVars:
          type: object

    StopContainerRequest:
      type: object
      properties:
        containerName:
          type: string

    StartContainerResponse:
      type: object
      properties:
        success:
          type: boolean
        response:
          type: string
          enum:
            - 'started_container'
            - 'ERR_container_already_running'
            - 'ERR_image_not_found'
            - 'ERR_could_not_start_container'
            - 'ERR_connection_to_mining_pool_failed'
            - 'ERR_authentication_on_mining_pool_failed'
            - 'ERR_other'

    StopContainerResponse:
      type: object
      properties:
        status:
          type: boolean
        response:
          type: string
          enum:
            - 'stopped_container'
            - 'ERR_container_not_running'
            - 'ERR_other'
