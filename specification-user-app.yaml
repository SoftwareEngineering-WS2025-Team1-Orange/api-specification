openapi: 3.1.0
info:
  title: Donator-Mainframe communication
  version: 0.1.0
servers:
  - url: "{protocol}://{url}/api/v1"
    variables:
      url:
        description: Customer ID assigned by the service provider
        default: 'localhost:9000/api/v1'
      protocol:
        enum:
          - http
          - https
        default: https
      
paths:
  /donator:
    post:
      tags:
      - Donator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Donator_Register'
      responses:
        '201':
          description: Created Donator
          content:
            application/json:
              schema:
                type: integer

  /donator/{donator_id}:
    get:
      parameters:
        - $ref: '#/components/parameters/donatorid'
      tags:
      - Donator
      responses:
        '200':
          description: Returning donator object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donator'

  /donator/login:
    post:
      tags:
      - Donator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Donator_Login'
      responses:
        '200':
          description: Returning donator object
          content:
            application/json:
              schema:
                type: object
                properties:
                  donator_id:
                      type: integer
                  access_token:
                    $ref: '#/components/schemas/Response_Token'
        '403':
          description: User does not have access to this resource

              
  /donator/me:
    get:
      tags:
      - Donator
      responses:
        '200':
          description: Returning donator object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donator'


  /donator/{donator_id}/wallet:
    get:
      parameters:
        - $ref: '#/components/parameters/donatorid'
      tags:
        - Wallet
      responses:
        '200':
          description: Returning wallet of the Donator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'

  /donator/{donator_id}/donationbox:
    get:
      parameters:
        - $ref: '#/components/parameters/donatorid'
      tags:
        - Donationbox
      responses:
        '200':
          description: Returns a list of all donationboxes of the donator
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Donationbox'


    post:
      parameters:
        - $ref: '#/components/parameters/donatorid'
      tags:
        - Donationbox
        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Donationbox_Register'

      responses:
        '201':
          description: Donationbox was added successfully.


  /donator/{donator_id}/powersupply:
    get:
      parameters:
        - $ref: '#/components/parameters/donatorid'
      tags:
        - PowerSupply
      responses:
        '200':
          description: "Returns all powersupplies of the user"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Power_Supply'

    post:
      parameters:
        - $ref: '#/components/parameters/donatorid'
      tags:
        - PowerSupply
        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Power_Supply_Register'

      responses:
        '201':
          description: Power_Supply was added successfully.
          
  /project:
    get:
      parameters:
        - name: filter_project_id
          in: query
          required: false
          schema:
            type: integer
        - name: filter_category
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Project_Category'
        - name: filter_is_favorite
          in: query
          required: false
          schema:
            type: boolean
        - name: filter_name_contains
          in: query
          required: false
          schema:
            type: string
        - name: filter_is_archived
          in: query
          required: false
          schema:
            type: boolean
        - name: filter_donated_to
          in: query
          required: false
          schema:
            type: boolean
        - name: filter_page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: filter_results_per_page
          in: query
          required: false
          schema:
            type: integer
            default: 20
        - name: filter_ngo_id
          in: query
          required: false
          schema:
            type: integer
        - name: sort_created_at
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Sort_Type'
        - name: sort_name
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Sort_Type'
        - name: sort_recent_donated_at
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Sort_Type'
      tags:
        - Project
      responses:
        '200':
          description: "Returns all projects based on the filter query parameters and sort parameters"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'


  /ngo:
    get:
      parameters:
        - name: filter_ngo_id
          in: query
          required: false
          schema:
            type: integer
        - name: filter_is_favorite
          in: query
          required: false
          schema:
            type: boolean
        - name: filter_name_contains
          in: query
          required: false
          schema:
            type: string
        - name: filter_donated_to
          in: query
          required: false
          schema:
            type: boolean
        - name: filter_page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: filter_results_per_page
          in: query
          required: false
          schema:
            type: integer
            default: 20
        - name: sort_created_at
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Sort_Type'
        - name: sort_name
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Sort_Type'
      tags:
        - NGO
      responses:
        '200':
          description: "Returns all ngos based on the filter query parameters and sort parameters"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NGO'


  
  /token:
    post:
      tags:
      - Token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Request_Token'
      
      responses:
        '200':
          description: Returns a Request_Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_Token'
        '403':
          description: User does not have access to this resouce
        
      
      
security:
  - OAuth2PasswordBearer: []
    
components:

  parameters:
    donatorid:
      name: donator_id
      in: path
      required: true
      schema:
        type: integer

  schemas:
    Donator_Register:
      type: object
      required:
      - firstname
      - lastname
      - password
      - mail
      properties:
        firstname:
          type: string
          title: Name
        lastname:
          type: string
          title: Name
        password:
          type: string
          title: Password
        mail:
          type: string
          title: Mail

    Donator_Login:
      type: object
      required:
      - mail
      - password
      properties:
        mail:
          type: string
          title: Mail
        password:
          type: string
          title: Password
          
    Donator:
      type: object
      required:
        - firstname
        - lastname
        - mail
        - donator_id
      properties:
        firstname:
          type: string
          title: Name
        lastname:
          type: string
          title: Name
        mail:
          type: string
          title: Mail
        donator_id:
          type: integer
          title: Donator_Id

    Wallet:
      type: object
      required:
        - balance
      
      properties:
        balance:
          type: number
          title: Balance


    Donationbox:
      type: object
      required:
        - id
        - cuid
        - last_status
      properties:
        id:
          type: integer
          title: ID
        cuid:
          type: string
          title: cuid
        last_status:
          type: string
          enum:
            - OFFLINE
            - ERROR
            - CONNECTED # SYSTEM IS UP BUT NO SURPLUS POWER AVAILABLE
            - READY     # SYSTEM IS READY AND SURPLUS POWER IS AVAILABLE
            - WORKING  # IS RUNNING TASK
          title: Last Status
        power_consumption:
          type: number
          title: Power Consumption
        power_supply_id:
          type: string
          title: Power Supply Id

    Donationbox_Register:
      type: object
      required:
        - cuid
      properties:
        cuid:
          type: string
          title: cuid
        power_supply_id:
          type: string
          title: Power Supply Id

    Power_Supply:
      type: object
      required:
        - id
        - type
        - last_status
        - power_surplus
        - name
        - model_number
        - api_config
      properties:
        id:
          type: string
          title: ID
        type:
          type: string
          enum:
            - Solar
            - Alternative
          title: Supply Type
        last_status:
          type: string
          enum:
            - OFFLINE
            - CONNECTED
            - INVALID_AUTH
            - ERROR
          title: Last Status
        power_surplus:
          type: number
          title: Power Surplus
        name:
          type: string
          title: Name
        model_number:
          type: string
          title: Model Number
        api_config:
          type: string
          title: API Config
          description: Flexible JSON string that contains attributes depending on the model number

    Power_Supply_Register:
      type: object
      required:
        - model_number
        - name
        - type
        - api_config
      properties:
        name:
          type: string
          title: Name
        model_number:
          type: string
          title: Model Number
        api_config:
          type: string
          title: API Config
          description: Flexible JSON string that contains attributes depending on the model number
        type:
          type: string
          enum:
            - Solar
            - Alternative
          title: Supply Type

    NGO:
      type: object
      required:
        - name
        - id
        - website_url
        - description
        - banner_uri
        - is_favorite
      properties:
        name:
          type: string
          title: Name
        id:
          type: integer
          title: ID
        website_url:
          type: string
          title: Website URL
        description:
          type: string
          title: Description
        banner_uri:
          type: string
          title: Banner URI
        is_favorite:
          type: boolean
          title: Is Favorite

    Project:
      type: object
      required:
        - id
        - name
        - description
        - banner_uri
        - ngo_id
        - ngo_name
        - is_favorite
        - fundraising_closed
        - fundraising_goal
        - current_fundraising
        - target_date
        - is_archived
        - category
        - created_at

      properties:
        id:
          type: integer
          title: ID
        name:
          type: string
          title: Name
        description:
          type: string
          title: Description
        banner_uri:
          type: string
          title: Banner URI
        ngo_id:
          type: integer
          title: NGO ID
        ngo_name:
          type: string
          title: NGO Name
        is_favorite:
          type: boolean
          title: Is Favorite
        fundraising_goal:
          type: number
          title: Fundraising Goal
        current_fundraising:
          type: number
          title: Current Fundraising
        target_date:
          type: string
          format: date
          title: Target Date
        created_at:
          type: string
          format: date
          title: Created At
        fundraising_closed:
          type: boolean
          title: Fundraising Closed
        is_archived:
          type: boolean
          title: Is Archived
        category:
          type: array
          items:
            $ref: '#/components/schemas/Project_Category'

    Project_Category:
      type: string
      enum:
        - Education
        - Health
        - Environment
        - Human_Rights
        - Animal_Rights
        - Social
        - Other

    Sort_Type:
      type: string
      enum:
        - asc
        - desc

    Request_Token:
      properties:
        grant_type:
          anyOf:
          - type: string
            pattern: password
          - type: 'null'
          title: Grant Type
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
        scope:
          type: string
          title: Scope
          default: ''
        client_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Client Id
        client_secret:
          anyOf:
          - type: string
          - type: 'null'
          title: Client Secret
      type: object
      required:
      - username
      - password
      title: Request_Token

    Response_Token:
      properties:
        access_token:
          type: string
          title: Access Token
        token_type:
          type: string
          title: Token Type
      type: object
      required:
      - access_token
      - token_type
      title: Token
      
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: {}
          tokenUrl: token
