openapi: 3.1.0
info:
  title: Donator-Mainframe communication
  version: 0.1.0
servers:
  - url: "{protocol}://{url}/api/v1"
    variables:
      url:
        description: Customer ID assigned by the service provider
        default: 'localhost:9000'
      protocol:
        enum:
          - http
          - https
        default: https

paths:
  /api-donator/donator:
    post:
      operationId: registerDonator
      tags:
        - Donator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Donator_Register'
      responses:
        '201':
          description: Created Donator
          content:
            application/json:
              schema:
                type: integer

  /api-donator/donator/{donator_id}:
    get:
      operationId: getDonator
      parameters:
        - $ref: '#/components/parameters/donatorid'
        - $ref: '#/components/parameters/force_earnings_update'
      tags:
        - Donator
      responses:
        '200':
          description: Returning donator object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donator'

    put:
      operationId: updateDonator
      parameters:
        - $ref: '#/components/parameters/donatorid'
      tags:
        - Donator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Donator_Update'
      responses:
        '200':
          description: Donator was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donator'

    delete:
      operationId: deleteDonator
      parameters:
        - $ref: '#/components/parameters/donatorid'
      tags:
        - Donator
      responses:
        '204':
          description: No Content
        '400':
          description: Cannot delete donator with remaining balance. Please spend all funds before deletion.
        '404':
          description: Donator not found ready for deletion. Either he does not exist, is already deleted or still has donation boxes associated with him.

  /api-donator/donator/me:
    get:
      operationId: getDonatorByToken
      tags:
        - Donator
      responses:
        '200':
          description: Returning donator object specified by token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donator'

  /api-donator/auth/token:
    post:
      operationId: getToken
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request_Token'
      responses:
        '200':
          description: Returns a Request_Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_Token'
        '403':
          description: User does not have access to this resource
  /api-donator/auth/logout:
    post:
      operationId: logout
      tags:
        - Auth
      parameters: []
      responses:
        '201':
          description: ''

  /api-donator/donationbox/donator/{donator_id}:
    get:
      operationId: getDonationbox
      parameters:
        - $ref: '#/components/parameters/donatorid'
      tags:
        - Donationbox
      responses:
        '200':
          description: Returns a list of all donationboxes of the donator
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Donationbox'

    put:
      operationId: registerDonationbox
      parameters:
        - $ref: '#/components/parameters/donatorid'
      tags:
        - Donationbox

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Donationbox_Register'

      responses:
        '201':
          description: Donationbox was added successfully.

  /api-donator/donation/donator/{donator_id}/ngo/{ngo_id}:
    post:
      operationId: donateToNgo
      parameters:
        - $ref: '#/components/parameters/donatorid'
        - $ref: '#/components/parameters/ngoid'
      tags:
        - Donation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amountInCent:
                  type: integer
                  title: Amount in cent	

      responses:
        '201':
          description: Donation was added successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Donation_Response'
                  - type: object
                    properties:
                      project:
                        type: object
                        required:
                          - name
                          - id
                        properties:
                          name:
                            type: string
                          id:
                            type: integer
        '400':
          description: Amount was negative or balance was insufficient

  /api-donator/donation/donator/{donator_id}/project/{project_id}:
    post:
      operationId: donateToProject
      parameters:
        - $ref: '#/components/parameters/donatorid'
        - $ref: '#/components/parameters/projectid'
      tags:
        - Donation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amountInCent:
                  type: integer

      responses:
        '201':
          description: Donation was added successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Donation_Response'
                  - type: object
                    required:
                      - project
                    properties:
                      project:
                        type: object
                        required:
                          - name
                          - id
                        properties:
                          name:
                            type: string
                          id:
                            type: integer
        '400':
          description: Amount was negative or balance was insufficient

  


  /api-donator/powersupply/donator/{donator_id}:
    get:
      operationId: getPowersupply
      parameters:
        - $ref: '#/components/parameters/donatorid'
      tags:
        - PowerSupply
      responses:
        '200':
          description: "Returns all powersupplies of the user"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Power_Supply'

    post:
      operationId: addPowersupply
      parameters:
        - $ref: '#/components/parameters/donatorid'
      tags:
        - PowerSupply

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Power_Supply_Register'

      responses:
        '201':
          description: Power_Supply was added successfully.

  /api-donator/project/donator/{donator_id}:
    get:
      operationId: getProjectList
      parameters:
        - $ref: '#/components/parameters/donatorid'
        - name: filter_project_id
          in: query
          required: false
          schema:
            type: integer
        - name: filter_category
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Project_Category'
        - name: filter_is_favorite
          in: query
          required: false
          schema:
            type: boolean
        - name: filter_name_contains
          in: query
          required: false
          schema:
            type: string
        - name: filter_donated_to
          in: query
          required: false
          schema:
            type: boolean
        - name: pagination_page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: pagination_page_size
          in: query
          required: false
          schema:
            type: integer
            default: 20
        - name: filter_ngo_id
          in: query
          required: false
          schema:
            type: integer
        - name: filter_ngo_name_contains
          in: query
          required: false
          schema:
            type: string
        - name: sort_for
          in: query
          description: "The field to sort by"
          required: false
          schema:
            type: string
            enum:
              - name
              - created_at
              - donated_recently
        - name: sort_type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Sort_Type'
      tags:
        - Project
      responses:
        '200':
          description: "Returns all projects based on the filter query parameters and sort parameters"
          content:
            application/json:
              schema:
                type: object
                required:
                  - projects
                  - pagination
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  pagination:
                    $ref: '#/components/schemas/Pagination'



  /api-donator/project/{project_id}/donator/{donator_id}/favorite:
    put:
      operationId: favoriteProject
      parameters:
        - $ref: '#/components/parameters/projectid'
        - $ref: '#/components/parameters/donatorid'
      tags:
        - Donator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                favorite:
                  type: boolean
      responses:
        '200':
          description: Favorite was added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'


  /api-donator/ngo/donator/{donator_id}:
    get:
      operationId: getNgoList
      tags:
        - NGO
      parameters:
        - $ref: '#/components/parameters/donatorid'
        - name: filter_ngo_id
          in: query
          required: false
          schema:
            type: integer
        - name: filter_is_favorite
          in: query
          required: false
          schema:
            type: boolean
        - name: filter_name_contains
          in: query
          required: false
          schema:
            type: string
        - name: filter_donated_to
          in: query
          required: false
          schema:
            type: boolean
        - name: pagination_page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: pagination_page_size
          in: query
          required: false
          schema:
            type: integer
            default: 20
        - name: sort_type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Sort_Type'
        - name: sort_for
          in: query
          description: "The field to sort by"
          required: false
          schema:
            type: string
            enum:
              - name
              - created_at
      responses:
        '200':
          description: "Returns all ngos based on the filter query parameters and sort parameters"
          content:
            application/json:
              schema:
                type: object
                required:
                  - ngos
                  - pagination
                properties:
                  ngos:
                    type: array
                    items:
                      $ref: '#/components/schemas/NGO'
                  pagination:
                    $ref: '#/components/schemas/Pagination'


  /api-donator/ngo/{ngo_id}/donator/{donator_id}/favorite:
    put:
      operationId: favoriteNgo
      parameters:
        - $ref: '#/components/parameters/ngoid'
        - $ref: '#/components/parameters/donatorid'
      tags:
        - Donator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                favorite:
                  type: boolean
      responses:
        '200':
          description: Favorite was added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NGO'


  /api-donator/transaction/donator/{donator_id}:
    get:
      operationId: getTransactionList
      parameters:
        - $ref: '#/components/parameters/donatorid'
        - $ref: '#/components/parameters/force_earnings_update'
        - name: filter_donation_ngo_id
          in: query
          required: false
          schema:
            type: integer
        - name: filter_donation_ngo_name
          in: query
          required: false
          schema:
            type: string
        - name: filter_donation_project_id
          in: query
          required: false
          schema:
            type: integer
        - name: filter_donation_project_name
          in: query
          required: false
          schema:
            type: string
        - name: filter_earning_donationbox_id
          in: query
          required: false
          schema:
            type: integer
        - name: filter_created_from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: filter_created_to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: filter_amount_from
          in: query
          required: false
          schema:
            type: number
        - name: filter_amount_to
          in: query
          required: false
          schema:
            type: number
        - name: sort_for
          in: query
          description: "The field to sort by"
          required: false
          schema:
            type: string
            enum:
              - amount
              - created_at
              - created_at_or_timestamp #Default sort field. Sorts donations by created_at and payouts by timestamp. Makes sense because payouts are fetched periodically and thus there can be identical created_at values for different timestamps
        - name: sort_type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Sort_Type'
        - name: pagination_page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: pagination_page_size
          in: query
          required: false
          schema:
            type: integer
            default: 20
      tags:
        - Donations
      responses:
        '200':
          description: Returns all donations based on the filter query parameters
          content:
            application/json:
              schema:
                type: object
                required:
                  - donations
                  - pagination
                  - earnings
                properties:
                  donations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Donation'
                  earnings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Earning'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

security:
  - OAuth2PasswordBearer: [ ]

components:

  parameters:
    donatorid:
      name: donator_id
      in: path
      required: true
      schema:
        type: integer
    ngoid:
      name: ngo_id
      in: path
      required: true
      schema:
        type: integer
    projectid:
      name: project_id
      in: path
      required: true
      schema:
        type: integer
    force_earnings_update:
      name: force_earnings_update
      in: query
      required: false
      schema:
        type: boolean
        default: false

  schemas:
    Pagination:
      type: object
      required:
        - totalResults
        - filteredResults
        - currentPage
        - pageSize
        - numberOfPages
      properties:
        totalResults:
          type: integer
        filteredResults:
          type: integer
        currentPage:
          type: integer
        pageSize:
          type: integer
        numberOfPages:
          type: integer

    Donator_Register:
      type: object
      required:
        - firstName
        - lastName
        - password
        - email
      properties:
        firstName:
          type: string
          title: Name
        lastName:
          type: string
          title: Name
        password:
          type: string
          title: Password
        email:
          type: string
          title: Mail

    Donator:
      type: object
      required:
        - firstName
        - lastName
        - email
        - balance
        - id
      properties:
        firstName:
          type: string
          title: Name
        lastName:
          type: string
          title: Name
        email:
          type: string
          title: Mail
        balance:
          type: number
          title: Balance
        id:
          type: integer
          title: ID

    Donator_Update:
      type: object
      properties:
        firstName:
          type: string
          title: Name
        lastName:
          type: string
          title: Name
        email:
          type: string
          title: Mail
        password:
          type: string
          title: Password

    Donation:
      type: object
      required:
        - id
        - amountInCent
        - ngo
        - createdAt
      properties:
        id:
          type: integer
          title: ID
        amountInCent:
          type: integer
          title: Amount in cent
        project:
          $ref: '#/components/schemas/Project_Basic'
        ngo:
          $ref: '#/components/schemas/NGO_Basic'
        createdAt:
          type: string
          format: date-time
          title: Created At

    Earning:
      type: object
      required:
        - id
        - amountInCent
        - createdAt
        - activeTimeInPeriod
        - donationBox
        - moneroMiningPayout
        - payoutType
        - payoutTimestamp
      properties:
        id:
          type: integer
          title: ID
        amountInCent:
          type: integer
          title: Amount in cent
        createdAt:
          type: string
          format: date-time
          title: Created At
        payoutType:
          type: string
          enum:
            - MONERO_MINING
          title: Payout Type
        payoutTimestamp:
          type: string
          format: date-time
          title: Payout Timestamp
        moneroMiningPayout:
          $ref: '#/components/schemas/MoneroMiningPayoutBasic'
        donationBox:
          $ref: '#/components/schemas/Donationbox_Basic'

    MoneroMiningPayoutBasic:
      type: object
      required:
        - timestamp
        - lastPayoutTimestamp
      properties:
        timestamp:
          type: string
          format: date-time
          title: Period Start
        lastPayoutTimestamp:
          type: string
          format: date-time
          title: Period End

    Donationbox:
      type: object
      required:
        - id
        - cuid
        - earningsLastUpdateSuccessfull
        - name
      properties:
        id:
          type: integer
          title: ID
        cuid:
          type: string
          title: cuid
        name:
          type: string
          title: Name
        lastSolarStatus:
          type: string
        earningsLastSuccessfullUpdateAt:
          type: string
          format: date-time
          title: Earnings Last Successfull Update At
        earningsLastUpdateSuccessfull:
          type: boolean
          title: Earnings Last Update Successfull
        power_surplus:
          type: number
          title: Power Surplus
        power_consumption:
          type: number
          title: Power Consumption
        powerSupplyId:
          type: string
          title: Power Supply Id

    Donationbox_Basic:
      type: object
      required:
        - id
        - cuid
        - name
      properties:
        id:
          type: integer
          title: ID
        cuid:
          type: string
          title: cuid
        name:
          type: string
          title: Name

    Donationbox_Register:
      type: object
      required:
        - cuid
        - name
      properties:
        cuid:
          type: string
          title: cuid
        name:
          type: string
          title: Name
        power_supply_id:
          type: string
          title: Power Supply Id

    Donation_Response:
      type: object
      required:
        - id
        - amountInCent
        - createdAt
        - ngo
        - newBalance
      properties:
        id:
          type: integer
        amountInCent:
          type: integer
        createdAt:
          type: string
          format: date-time
        ngo:
          type: object
          required:
            - name
            - id
          properties:
            name:
              type: string
            id:
              type: integer
        newBalance:
          type: number

    Power_Supply:
      type: object
      required:
        - id
        - type
        - last_status
        - power_surplus
        - name
        - model_number
        - api_config
      properties:
        id:
          type: string
          title: ID
        type:
          type: string
          enum:
            - Solar
            - Alternative
          title: Supply Type
        last_status:
          type: string
          enum:
            - OFFLINE
            - CONNECTED
            - INVALID_AUTH
            - ERROR
          title: Last Status
        power_surplus:
          type: number
          title: Power Surplus
        name:
          type: string
          title: Name
        model_number:
          type: string
          title: Model Number
        api_config:
          type: string
          title: API Config
          description: Flexible JSON string that contains attributes depending on the model number

    Power_Supply_Register:
      type: object
      required:
        - model_number
        - name
        - type
        - api_config
      properties:
        name:
          type: string
          title: Name
        model_number:
          type: string
          title: Model Number
        api_config:
          type: string
          title: API Config
          description: Flexible JSON string that contains attributes depending on the model number
        type:
          type: string
          enum:
            - Solar
            - Alternative
          title: Supply Type

    NGO:
      type: object
      required:
        - name
        - id
        - description
        - address
        - is_favorite
        - contact
      properties:
        name:
          type: string
          title: Name
        id:
          type: integer
          title: ID
        website_url:
          type: string
          title: Website URL
        contact:
          type: string
          title: Contact Information
        address:
          type: string
          title: Address Information
        description:
          type: string
          title: Description
        banner_uri:
          type: string
          title: Banner URI
        is_favorite:
          type: boolean
          title: Is Favorite

    NGO_Basic:
      type: object
      required:
        - name
        - id
      properties:
        name:
          type: string
          title: Name
        id:
          type: integer
          title: ID

    Project_Basic:
      type: object
      required:
        - name
        - id
      properties:
        name:
          type: string
          title: Name
        id:
          type: integer
          title: ID

    Project:
      type: object
      required:
        - id
        - name
        - description
        - ngo
        - is_favorite
        - fundraising_closed
        - fundraising_goal
        - fundraising_current
        - progress
        - target_date
        - category
        - createdAt

      properties:
        id:
          type: integer
          title: ID
        name:
          type: string
          title: Name
        description:
          type: string
          title: Description
        banner_uri:
          type: string
          title: Banner URI
        is_favorite:
          type: boolean
          title: Is Favorite
        fundraising_goal:
          type: number
          title: Fundraising Goal
        fundraising_current:
          type: number
          title: Current Fundraising
        target_date:
          type: string
          format: date
          title: Target Date
        createdAt:
          type: string
          format: date-time
          title: Created At
        fundraising_closed:
          type: boolean
          title: Fundraising Closed
        progress:
          type: number
          title: Progress
        category:
          $ref: '#/components/schemas/Project_Category'
        ngo:
          $ref: '#/components/schemas/NGO_Basic'

    Project_Category:
      type: string
      enum:
        - Education
        - Health
        - Environment
        - Human_Rights
        - Animal_Rights
        - Social
        - Other

    Sort_Type:
      type: string
      enum:
        - asc
        - desc

    Request_Token:
      properties:
        grant_type:
          type: string
          pattern: password|refresh_token
          title: Grant Type
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
        scope:
          type: string
          title: Scope
          default: ''
        client_id:
          anyOf:
            - type: string
            - type: 'null'
          title: Client Id
        client_secret:
          anyOf:
            - type: string
            - type: 'null'
          title: Client Secret
      type: object
      required:
        - grant_type
        - client_id
        - client_secret
      title: Request_Token

    Response_Token:
      properties:
        access_token:
          type: string
          title: Access Token
        token_type:
          type: string
          title: Token Type
        expires_in:
          type: integer
          title: Expires In
        scope:
          type: string
          title: Token Type
      type: object
      required:
        - access_token
      title: Token

  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: { }
          tokenUrl: /api-donator/auth/token
